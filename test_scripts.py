from funcs import *

# summed_options = [[1,2], [3,4], [1,4]]
# completed_cols = [1,2]
# for option in summed_options:
#     for val in option:
#         if val in completed_cols:
#             option.remove(val)
# print(summed_options)

# def remove_occurrences(nested_list, target):
#    result = []
#    for element in nested_list:
#       if isinstance(element, list):
#          result.append(remove_occurrences(element, target))
#       elif element != target:
#          result.append(element)
#    return result
#
#
# summed_options = [[1,2], [3,4], [1,4]]
# completed_cols = [1,4]
# for target in completed_cols:
#     summed_options = remove_occurrences(summed_options, target)
#     summed_options = [x for x in summed_options if x != []]
# print(summed_options)
FULL_GAIN = {2: 0.3333, 3: 0.2, 4: 0.1429, 5: 0.1111, 6: 0.0909, 7: 0.0769, 8: 0.0909, 9: 0.1111, 10: 0.1429, 11: 0.2, 12: 0.3333}
PAIR_PROBS = {'[2, 2]': 0.0007716049382716049, '[2, 3]': 0.0030864197530864196, '[2, 4]': 0.007716049382716049, '[2, 5]': 0.012345679012345678, '[2, 6]': 0.016975308641975308, '[2, 7]': 0.021604938271604937, '[3, 3]': 0.004629629629629629, '[3, 4]': 0.012345679012345678, '[3, 5]': 0.018518518518518517, '[3, 6]': 0.027777777777777776, '[2, 8]': 0.023148148148148147, '[3, 7]': 0.037037037037037035, '[4, 4]': 0.014660493827160493, '[4, 5]': 0.030864197530864196, '[4, 6]': 0.047839506172839504, '[2, 9]': 0.018518518518518517, '[4, 7]': 0.05864197530864197, '[5, 5]': 0.027777777777777776, '[5, 6]': 0.05864197530864197, '[2, 10]': 0.013888888888888888, '[5, 7]': 0.07407407407407407, '[6, 6]': 0.0470679012345679, '[2, 11]': 0.009259259259259259, '[6, 7]': 0.09567901234567901, '[2, 12]': 0.004629629629629629, '[7, 7]': 0.06944444444444445, '[3, 8]': 0.037037037037037035, '[3, 9]': 0.037037037037037035, '[4, 8]': 0.05401234567901234, '[3, 10]': 0.027777777777777776, '[5, 8]': 0.06790123456790123, '[3, 11]': 0.018518518518518517, '[6, 8]': 0.08487654320987655, '[3, 12]': 0.009259259259259259, '[7, 8]': 0.09567901234567901, '[4, 9]': 0.046296296296296294, '[4, 10]': 0.041666666666666664, '[5, 9]': 0.05555555555555555, '[4, 11]': 0.027777777777777776, '[6, 9]': 0.06790123456790123, '[4, 12]': 0.013888888888888888, '[7, 9]': 0.07407407407407407, '[5, 10]': 0.046296296296296294, '[5, 11]': 0.037037037037037035, '[6, 10]': 0.05401234567901234, '[5, 12]': 0.018518518518518517, '[7, 10]': 0.05864197530864197, '[6, 11]': 0.037037037037037035, '[6, 12]': 0.023148148148148147, '[7, 11]': 0.037037037037037035, '[7, 12]': 0.021604938271604937, '[8, 8]': 0.0470679012345679, '[8, 9]': 0.05864197530864197, '[8, 10]': 0.047839506172839504, '[8, 11]': 0.027777777777777776, '[8, 12]': 0.016975308641975308, '[9, 9]': 0.027777777777777776, '[9, 10]': 0.030864197530864196, '[9, 11]': 0.018518518518518517, '[9, 12]': 0.012345679012345678, '[10, 10]': 0.014660493827160493, '[10, 11]': 0.012345679012345678, '[10, 12]': 0.007716049382716049, '[11, 11]': 0.004629629629629629, '[11, 12]': 0.0030864197530864196, '[12, 12]': 0.0007716049382716049}


def ai_decide_continue(temp_nums, moved_up):
    if len(temp_nums) < 3:
        return 1
    else:
        prob_cont = PROB_CONTINUING_DICT[str(temp_nums)]
        ev = 0
        for pair in PAIR_PROBS:
            pair_list = list(map(int, pair.strip('][').split(', ')))
            for val in pair_list:
                if val in temp_nums:
                    ev += FULL_GAIN[val]*PAIR_PROBS[pair]

        expected_loss = (1-PROB_CONTINUING_DICT[str(temp_nums)])*sum(moved_up)

        print(ev, expected_loss)


ai_decide_continue([6,7,8], [0.66, 0.33, 0.33])
print(PROB_CONTINUING_DICT[str([6,7,8])])


#
# temp_nums = [2,11,12]
# moved_up = [0.33, 0.33, 0.33]
# print(ai_decide_continue(temp_nums, moved_up))
#
# temp_nums = [6,7,8]
# moved_up = [0.33, 0.33, 0.33]
# print(ai_decide_continue(temp_nums, moved_up))


def calc_sums_prob():
    sums_dict = {}
    for r1 in range(1, 7):
        for r2 in range(1, 7):
            for r3 in range(1, 7):
                for r4 in range(1, 7):
                    l1 = sorted([r1 + r2, r3 + r4])
                    l2 = sorted([r1 + r3, r2 + r4])
                    l3 = sorted([r1 + r4, r2 + r3])
                    all_combos = [str(l1), str(l2), str(l3)]
                    all_combos = list(dict.fromkeys(all_combos))
                    for combo in all_combos:
                        if combo in sums_dict:
                            sums_dict[combo] += 1
                        else:
                            sums_dict[combo] = 1
    return {k: v/6**4 for k, v in sums_dict.items()}

# print(calc_sums_prob())
# print(PAIR_PROBS)
# {'[2, 2]': 1, '[2, 3]': 3, '[3, 2]': 4, '[2, 4]': 6, '[4, 2]': 7, '[2, 5]': 9, '[5, 2]': 10, '[2, 6]': 12, '[6, 2]': 13, '[2, 7]': 15, '[7, 2]': 16, '[3, 3]': 6, '[3, 4]': 13, '[4, 3]': 12, '[3, 5]': 18, '[5, 3]': 18, '[3, 6]': 24, '[6, 3]': 24, '[2, 8]': 15, '[3, 7]': 30, '[7, 3]': 30, '[4, 4]': 19, '[4, 5]': 27, '[5, 4]': 28, '[4, 6]': 37, '[6, 4]': 37, '[2, 9]': 12, '[4, 7]': 45, '[7, 4]': 46, '[5, 5]': 36, '[5, 6]': 49, '[6, 5]': 48, '[2, 10]': 9, '[5, 7]': 60, '[7, 5]': 60, '[6, 6]': 61, '[2, 11]': 6, '[6, 7]': 75, '[7, 6]': 76, '[2, 12]': 3, '[7, 7]': 90, '[3, 8]': 27, '[3, 9]': 24, '[4, 8]': 39, '[3, 10]': 18, '[5, 8]': 52, '[3, 11]': 12, '[6, 8]': 64, '[3, 12]': 6, '[7, 8]': 76, '[4, 9]': 33, '[4, 10]': 27, '[5, 9]': 42, '[4, 11]': 18, '[6, 9]': 51, '[4, 12]': 9, '[7, 9]': 60, '[5, 10]': 33, '[5, 11]': 24, '[6, 10]': 40, '[5, 12]': 12, '[7, 10]': 46, '[6, 11]': 27, '[6, 12]': 15, '[7, 11]': 30, '[7, 12]': 16, '[8, 2]': 15, '[8, 3]': 27, '[8, 4]': 40, '[8, 5]': 51, '[8, 6]': 64, '[8, 7]': 75, '[8, 8]': 61, '[8, 9]': 48, '[8, 10]': 37, '[8, 11]': 24, '[8, 12]': 13, '[9, 2]': 12, '[9, 3]': 24, '[9, 4]': 33, '[9, 5]': 42, '[9, 6]': 52, '[9, 7]': 60, '[9, 8]': 49, '[9, 9]': 36, '[9, 10]': 28, '[9, 11]': 18, '[9, 12]': 10, '[10, 2]': 9, '[10, 3]': 18, '[10, 4]': 27, '[10, 5]': 33, '[10, 6]': 39, '[10, 7]': 45, '[10, 8]': 37, '[10, 9]': 27, '[10, 10]': 19, '[10, 11]': 12, '[10, 12]': 7, '[11, 2]': 6, '[11, 3]': 12, '[11, 4]': 18, '[11, 5]': 24, '[11, 6]': 27, '[11, 7]': 30, '[11, 8]': 24, '[11, 9]': 18, '[11, 10]': 13, '[11, 11]': 6, '[11, 12]': 4, '[12, 2]': 3, '[12, 3]': 6, '[12, 4]': 9, '[12, 5]': 12, '[12, 6]': 15, '[12, 7]': 15, '[12, 8]': 12, '[12, 9]': 9, '[12, 10]': 6, '[12, 11]': 3, '[12, 12]': 1}

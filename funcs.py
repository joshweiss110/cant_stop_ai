import random

PROB_CONTINUING_DICT = {'[2]': 0.13, '[2, 3]': 0.32, '[2, 4]': 0.44, '[2, 5]': 0.53, '[2, 6]': 0.63, '[2, 7]': 0.71, '[2, 8]': 0.67, '[2, 9]': 0.56, '[2, 10]': 0.47, '[2, 11]': 0.36, '[2, 12]': 0.26, '[2, 3, 4]': 0.52, '[2, 3, 5]': 0.58, '[2, 3, 6]': 0.68, '[2, 3, 7]': 0.75, '[2, 3, 8]': 0.76, '[2, 3, 9]': 0.71, '[2, 3, 10]': 0.63, '[2, 3, 11]': 0.53, '[2, 3, 12]': 0.44, '[2, 4, 5]': 0.66, '[2, 4, 6]': 0.76, '[2, 4, 7]': 0.81, '[2, 4, 8]': 0.82, '[2, 4, 9]': 0.76, '[2, 4, 10]': 0.74, '[2, 4, 11]': 0.63, '[2, 4, 12]': 0.55, '[2, 5, 6]': 0.77, '[2, 5, 7]': 0.81, '[2, 5, 8]': 0.83, '[2, 5, 9]': 0.76, '[2, 5, 10]': 0.76, '[2, 5, 11]': 0.71, '[2, 5, 12]': 0.63, '[2, 6, 7]': 0.86, '[2, 6, 8]': 0.88, '[2, 6, 9]': 0.83, '[2, 6, 10]': 0.81, '[2, 6, 11]': 0.76, '[2, 6, 12]': 0.74, '[2, 7, 8]': 0.89, '[2, 7, 9]': 0.84, '[2, 7, 10]': 0.83, '[2, 7, 11]': 0.78, '[2, 7, 12]': 0.78, '[2, 8, 9]': 0.82, '[2, 8, 10]': 0.82, '[2, 8, 11]': 0.74, '[2, 8, 12]': 0.74, '[2, 9, 10]': 0.71, '[2, 9, 11]': 0.64, '[2, 9, 12]': 0.63, '[2, 10, 11]': 0.58, '[2, 10, 12]': 0.55, '[2, 11, 12]': 0.44, '[3]': 0.23, '[3, 4]': 0.47, '[3, 5]': 0.53, '[3, 6]': 0.64, '[3, 7]': 0.71, '[3, 8]': 0.68, '[3, 9]': 0.64, '[3, 10]': 0.56, '[3, 11]': 0.45, '[3, 12]': 0.36, '[3, 4, 5]': 0.67, '[3, 4, 6]': 0.74, '[3, 4, 7]': 0.79, '[3, 4, 8]': 0.8, '[3, 4, 9]': 0.78, '[3, 4, 10]': 0.76, '[3, 4, 11]': 0.66, '[3, 4, 12]': 0.58, '[3, 5, 6]': 0.77, '[3, 5, 7]': 0.79, '[3, 5, 8]': 0.81, '[3, 5, 9]': 0.78, '[3, 5, 10]': 0.76, '[3, 5, 11]': 0.71, '[3, 5, 12]': 0.64, '[3, 6, 7]': 0.86, '[3, 6, 8]': 0.85, '[3, 6, 9]': 0.83, '[3, 6, 10]': 0.82, '[3, 6, 11]': 0.76, '[3, 6, 12]': 0.74, '[3, 7, 8]': 0.89, '[3, 7, 9]': 0.84, '[3, 7, 10]': 0.84, '[3, 7, 11]': 0.78, '[3, 7, 12]': 0.78, '[3, 8, 9]': 0.84, '[3, 8, 10]': 0.83, '[3, 8, 11]': 0.76, '[3, 8, 12]': 0.76, '[3, 9, 10]': 0.78, '[3, 9, 11]': 0.71, '[3, 9, 12]': 0.71, '[3, 10, 11]': 0.66, '[3, 10, 12]': 0.63, '[3, 11, 12]': 0.53, '[4]': 0.36, '[4, 5]': 0.61, '[4, 6]': 0.72, '[4, 7]': 0.77, '[4, 8]': 0.75, '[4, 9]': 0.68, '[4, 10]': 0.67, '[4, 11]': 0.56, '[4, 12]': 0.47, '[4, 5, 6]': 0.8, '[4, 5, 7]': 0.85, '[4, 5, 8]': 0.85, '[4, 5, 9]': 0.8, '[4, 5, 10]': 0.82, '[4, 5, 11]': 0.78, '[4, 5, 12]': 0.71, '[4, 6, 7]': 0.89, '[4, 6, 8]': 0.91, '[4, 6, 9]': 0.86, '[4, 6, 10]': 0.88, '[4, 6, 11]': 0.83, '[4, 6, 12]': 0.82, '[4, 7, 8]': 0.9, '[4, 7, 9]': 0.89, '[4, 7, 10]': 0.88, '[4, 7, 11]': 0.84, '[4, 7, 12]': 0.83, '[4, 8, 9]': 0.86, '[4, 8, 10]': 0.88, '[4, 8, 11]': 0.82, '[4, 8, 12]': 0.81, '[4, 9, 10]': 0.82, '[4, 9, 11]': 0.76, '[4, 9, 12]': 0.76, '[4, 10, 11]': 0.76, '[4, 10, 12]': 0.74, '[4, 11, 12]': 0.63, '[5]': 0.45, '[5, 6]': 0.73, '[5, 7]': 0.78, '[5, 8]': 0.77, '[5, 9]': 0.69, '[5, 10]': 0.68, '[5, 11]': 0.64, '[5, 12]': 0.56, '[5, 6, 7]': 0.89, '[5, 6, 8]': 0.9, '[5, 6, 9]': 0.87, '[5, 6, 10]': 0.86, '[5, 6, 11]': 0.84, '[5, 6, 12]': 0.82, '[5, 7, 8]': 0.91, '[5, 7, 9]': 0.85, '[5, 7, 10]': 0.89, '[5, 7, 11]': 0.84, '[5, 7, 12]': 0.84, '[5, 8, 9]': 0.87, '[5, 8, 10]': 0.86, '[5, 8, 11]': 0.83, '[5, 8, 12]': 0.83, '[5, 9, 10]': 0.8, '[5, 9, 11]': 0.78, '[5, 9, 12]': 0.76, '[5, 10, 11]': 0.78, '[5, 10, 12]': 0.76, '[5, 11, 12]': 0.71, '[6]': 0.56, '[6, 7]': 0.84, '[6, 8]': 0.82, '[6, 9]': 0.77, '[6, 10]': 0.75, '[6, 11]': 0.68, '[6, 12]': 0.67, '[6, 7, 8]': 0.92, '[6, 7, 9]': 0.91, '[6, 7, 10]': 0.9, '[6, 7, 11]': 0.89, '[6, 7, 12]': 0.89, '[6, 8, 9]': 0.9, '[6, 8, 10]': 0.91, '[6, 8, 11]': 0.85, '[6, 8, 12]': 0.88, '[6, 9, 10]': 0.85, '[6, 9, 11]': 0.81, '[6, 9, 12]': 0.83, '[6, 10, 11]': 0.8, '[6, 10, 12]': 0.82, '[6, 11, 12]': 0.76, '[7]': 0.64, '[7, 8]': 0.84, '[7, 9]': 0.78, '[7, 10]': 0.77, '[7, 11]': 0.71, '[7, 12]': 0.71, '[7, 8, 9]': 0.89, '[7, 8, 10]': 0.89, '[7, 8, 11]': 0.86, '[7, 8, 12]': 0.86, '[7, 9, 10]': 0.85, '[7, 9, 11]': 0.79, '[7, 9, 12]': 0.81, '[7, 10, 11]': 0.79, '[7, 10, 12]': 0.81, '[7, 11, 12]': 0.75, '[8]': 0.56, '[8, 9]': 0.73, '[8, 10]': 0.72, '[8, 11]': 0.64, '[8, 12]': 0.63, '[8, 9, 10]': 0.8, '[8, 9, 11]': 0.77, '[8, 9, 12]': 0.77, '[8, 10, 11]': 0.74, '[8, 10, 12]': 0.76, '[8, 11, 12]': 0.68, '[9]': 0.45, '[9, 10]': 0.61, '[9, 11]': 0.53, '[9, 12]': 0.53, '[9, 10, 11]': 0.67, '[9, 10, 12]': 0.66, '[9, 11, 12]': 0.58, '[10]': 0.36, '[10, 11]': 0.47, '[10, 12]': 0.44, '[10, 11, 12]': 0.52, '[11]': 0.23, '[11, 12]': 0.32, '[12]': 0.13}


def create_board():
    board_dict = {}
    for i in range(2, 13):
        board_dict[i] = 0
    return board_dict


def remove_occurrences(nested_list, target):
    result = []
    for element in nested_list:
        if isinstance(element, list):
            result.append(remove_occurrences(element, target))
        elif element != target:
            result.append(element)
    return result


def roll_dice():
    dice_rolled = []
    for i in range(4):
        dice_rolled.append(random.randint(1, 6))

    summed_options = [[dice_rolled[0] + dice_rolled[1], dice_rolled[2] + dice_rolled[3]],
                      [dice_rolled[0] + dice_rolled[2], dice_rolled[1] + dice_rolled[3]],
                      [dice_rolled[0] + dice_rolled[3], dice_rolled[2] + dice_rolled[1]]]
    return dice_rolled, summed_options


def generate_prob_continuing():
    prob_continuing = {}
    for temp1 in range(2, 14):
        for temp2 in range(2, 14):
            for temp3 in range(2, 14):
                temp_nums = [temp1, temp2, temp3]
                temp_nums = list(dict.fromkeys(temp_nums))
                if 13 in temp_nums: temp_nums.remove(13)
                temp_nums.sort()
                if temp_nums:
                    prob_continuing[str(temp_nums)] = 0

    for r1 in range(1, 7):
        for r2 in range(1, 7):
            for r3 in range(1, 7):
                for r4 in range(1, 7):
                    rolled_nums = [r1 + r2, r1 + r3, r1 + r4, r2 + r3, r2 + r4, r3 + r4]
                    rolled_nums = list(dict.fromkeys(rolled_nums))
                    for prob_nums in prob_continuing:
                        prob_nums_list = list(map(int, prob_nums.strip('][').split(', ')))
                        if any([i for i in rolled_nums if i in prob_nums_list]):
                            prob_continuing[prob_nums] += 1

    for val in prob_continuing:
        prob_continuing[val] /= 6**4
        prob_continuing[val] = round(prob_continuing[val], 2)

    return prob_continuing


def calc_prob_cont(temp_nums):
    prob_cont = PROB_CONTINUING_DICT[str(temp_nums)]
    return prob_cont